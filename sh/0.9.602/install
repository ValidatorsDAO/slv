#!/bin/bash

set -e

VERSION="0.9.602"
BASE_URL="https://storage.slv.dev/slv"
GRPC_TEST_URL_LINUX="https://storage.elsoul.nl/grpc_test"
GRPC_TEST_URL_MAC="https://storage.elsoul.nl/grpc_test_mac"
SHREDS_TEST_URL_LINUX="https://storage.elsoul.nl/bin/latest/deshred"
SHREDS_TEST_URL_MAC="https://storage.elsoul.nl/bin/latest/deshred_mac"

# Detect the platform (Linux/macOS/Windows) based on 'uname'
detect_platform() {
  uname_out="$(uname -s)"
  case "${uname_out}" in
    Linux*)     platform="x86_64-unknown-linux-gnu"; osfamily="linux";;
    Darwin*)    platform="x86_64-apple-darwin"; osfamily="darwin";;
    CYGWIN*|MINGW*|MSYS*|Windows*) platform="x86_64-pc-windows-msvc"; osfamily="windows";;
    *)          echo "Unsupported platform: ${uname_out}" && exit 1;;
  esac
  
  # Detect architecture
  arch_out="$(uname -m)"
  case "${arch_out}" in
    x86_64)     arch="x86_64";;
    amd64)      arch="x86_64";;
    arm64)      arch="arm64";;
    aarch64)    arch="arm64";;
    *)          arch="unknown";;
  esac
}

# Install the 'slv' tool
install_slv() {
  # Build the download URLs
  DOWNLOAD_URL="${BASE_URL}/${VERSION}/${platform}-exe.tar.gz?cachebuster=$(date +%s)"
  TEMPLATE_URL="${BASE_URL}/template/${VERSION}/template.tar.gz?cachebuster=$(date +%s)"

  # Prepare directories
  mkdir -p "$HOME/.slv"
  mkdir -p "$HOME/.slv/keys"

  echo "Downloading slv from $DOWNLOAD_URL..."
  # Use --progress-bar to show download progress
  curl -fSL --progress-bar "$DOWNLOAD_URL" -o "$TEMP_DIR/slv.tar.gz"

  echo "Downloading templates from $TEMPLATE_URL..."
  curl -fSL --progress-bar "$TEMPLATE_URL" -o "$HOME/.slv/template.tar.gz"
  
  echo "Extracting slv..."
  tar -xzvf "$TEMP_DIR/slv.tar.gz" -C "$TEMP_DIR" --strip-components=1

  echo "Extracting templates..."
  tar -xzvf "$HOME/.slv/template.tar.gz" -C "$HOME/.slv" --strip-components=1
  mkdir -p "$HOME/.slv/template"
  echo "Copying templates to $HOME/.slv/template"

  # Determine the correct executable filename for the current platform
  if [ "$platform" = "x86_64-apple-darwin" ]; then
      SLV_FILE="$TEMP_DIR/slv-x86_64-apple-darwin-exe"
  elif [ "$platform" = "x86_64-unknown-linux-gnu" ]; then
      SLV_FILE="$TEMP_DIR/slv-x86_64-unknown-linux-gnu-exe"
  elif [ "$platform" = "x86_64-pc-windows-msvc" ]; then
      SLV_FILE="$TEMP_DIR/slv-x86_64-pc-windows-msvc.exe"
  else
      echo "Error: Unsupported platform $platform"
      exit 1
  fi

  # Check if the extracted file exists
  if [ ! -f "$SLV_FILE" ]; then
    echo "Error: Extracted file not found."
    exit 1
  fi

  echo "Installing slv..."

  # Create the install directory if it doesn't exist
  if [ ! -d "$INSTALL_DIR" ]; then
    echo "$INSTALL_DIR does not exist. Creating it..."
    sudo mkdir -p "$INSTALL_DIR"
  fi

  # Move the executable and make it executable
  if [ "$platform" = "x86_64-pc-windows-msvc" ]; then
    sudo mv "$SLV_FILE" "$INSTALL_DIR/slv.exe"
  else
    sudo mv "$SLV_FILE" "$INSTALL_DIR/slv"
    sudo chmod +x "$INSTALL_DIR/slv"
  fi

  echo "slv has been installed successfully!"
}

# Install the gRPC test binary
install_grpc_test() {
  # Check if the gRPC test binary is already installed
  if [ -f "$HOME/.slv/bin/grpc_test" ]; then
    echo "gRPC test binary already installed!"
    return
  fi
  # Download the appropriate gRPC test binary based on the platform
  echo "Downloading gRPC test binary for $osfamily..."
  mkdir -p "$HOME/.slv/bin"
  
  if [ "$osfamily" = "darwin" ]; then
    curl -fSL --progress-bar "$GRPC_TEST_URL_MAC" -o "$HOME/.slv/bin/grpc_test"
  elif [ "$osfamily" = "linux" ]; then
    curl -fSL --progress-bar "$GRPC_TEST_URL_LINUX" -o "$HOME/.slv/bin/grpc_test"
  else
    echo "Warning: gRPC test binary is not available for $osfamily."
    return
  fi
  
  chmod +x "$HOME/.slv/bin/grpc_test"
  
  echo "gRPC test binary installed in $HOME/.slv/bin/grpc_test"
}

# Install the shreds test binary
install_shreds_test() {
  # Check if the shreds test binary is already installed
  if [ -f "$HOME/.slv/bin/shreds_test" ]; then
    echo "Shreds test binary already installed!"
    return
  fi
  # Download the appropriate shreds test binary based on the platform
  echo "Downloading shreds test binary for $osfamily..."
  mkdir -p "$HOME/.slv/bin"
  
  if [ "$osfamily" = "darwin" ]; then
    curl -fSL --progress-bar "$SHREDS_TEST_URL_MAC" -o "$HOME/.slv/bin/shreds_test"
  elif [ "$osfamily" = "linux" ]; then
    curl -fSL --progress-bar "$SHREDS_TEST_URL_LINUX" -o "$HOME/.slv/bin/shreds_test"
  else
    echo "Warning: Shreds test binary is not available for $osfamily."
    return
  fi
  
  chmod +x "$HOME/.slv/bin/shreds_test"
  
  echo "Shreds test binary installed in $HOME/.slv/bin/shreds_test"
}

# Main installation process
main() {
  echo "Detecting platform..."
  detect_platform
  echo "Platform detected: $platform ($arch)"
  
  # Set install directory based on platform
  INSTALL_DIR="/usr/local/bin"
  if [ "$platform" = "x86_64-pc-windows-msvc" ]; then
    INSTALL_DIR="$HOME/.local/bin"
    mkdir -p "$INSTALL_DIR"
  fi
  
  # Create temporary directory
  TEMP_DIR=$(mktemp -d)
  echo "Temporary directory: $TEMP_DIR"
  
  # Install slv
  install_slv
  
  # Install gRPC test binary and wrapper
  install_grpc_test
  
  # Install shreds test binary
  install_shreds_test
  
  # Clean up
  echo "âœ¨ Cleaning up..."
  rm -rf "$TEMP_DIR"
  rm -f "$HOME/.slv/template.tar.gz"
  
  echo "All components installed successfully!"
  echo "Ensure $INSTALL_DIR is in your PATH."
  if [ "$platform" = "x86_64-pc-windows-msvc" ]; then
    echo "Windows users, add $INSTALL_DIR to your PATH manually."
  fi

  slv v update:jinja
  slv v update:version -c
  
  # Optional: Test the installed 'slv'
  echo "Testing slv installation... ðŸ”¨"
  slv -P || true
  
  echo "You can now use 'slv check grpc' to run gRPC latency tests:"
  echo "Example: slv check grpc"
}

# Run the main function
main
