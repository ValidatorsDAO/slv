name: Update Yellowstone gRPC

on:
  schedule:
    - cron: "0 * * * *" # Run every hour
  workflow_dispatch: # Allow manual trigger
  push:
    branches: ["main"]
    paths:
      - ".github/workflows/update-yellowstone-grpc.yml"

jobs:
  check-and-build-yellowstone:
    name: Check and Build Yellowstone gRPC
    runs-on: [self-hosted]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install build dependencies
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libssl-dev \
            libudev-dev \
            libclang-dev \
            cmake \
            protobuf-compiler \
            git \
            curl \
            jq

      - name: Get latest Yellowstone gRPC release version
        id: get_version
        run: |
          set -euo pipefail
          # Get most recent release
          LATEST_RELEASE=$(curl -fsSL https://api.github.com/repos/rpcpool/yellowstone-grpc/releases | jq -r '.[0].tag_name' || true)
          echo "Latest Yellowstone gRPC release: ${LATEST_RELEASE}"
          if [ -z "${LATEST_RELEASE}" ] || [ "${LATEST_RELEASE}" = "null" ]; then
            echo "version=none" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "version=${LATEST_RELEASE}" >> $GITHUB_OUTPUT

      - name: Check which artifact already exists in R2 (slv & slv-asia)
        id: check_r2
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          set -euo pipefail
          VERSION="${{ steps.get_version.outputs.version }}"
          if [ "${VERSION}" = "none" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          BUCKETS=("slv" "slv-asia")
          KEY_SO="yellowstone-grpc/${VERSION}/libyellowstone_grpc_geyser.so"

          # Use Cloudflare R2 API to check both buckets
          check_api() {
            local bucket="$1"; local key="$2"
            curl -s -o /dev/null -w "%{http_code}" -X GET \
              "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/r2/buckets/${bucket}/objects/${key}" \
              -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}"
          }

          need_upload=false
          for b in "${BUCKETS[@]}"; do
            code=$(check_api "$b" "${KEY_SO}")
            echo "Check $b -> ${KEY_SO}: ${code}"
            if [ "$code" != "200" ]; then
              need_upload=true
            fi
          done

          if [ "$need_upload" = "true" ]; then
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "skip=false"   >> $GITHUB_OUTPUT
          else
            echo "exists=true"  >> $GITHUB_OUTPUT
            echo "skip=true"    >> $GITHUB_OUTPUT
          fi

      - name: Clone Yellowstone gRPC repository
        if: steps.check_r2.outputs.skip == 'false'
        run: |
          set -euxo pipefail
          git clone https://github.com/rpcpool/yellowstone-grpc.git yellowstone-build
          cd yellowstone-build
          git checkout ${{ steps.get_version.outputs.version }}
          git submodule update --init --recursive || true

      - name: Build Yellowstone gRPC
        if: steps.check_r2.outputs.skip == 'false'
        run: |
          set -euxo pipefail
          cd yellowstone-build
          cargo build --release
        env:
          RUST_BACKTRACE: 1

      - name: Collect library
        if: steps.check_r2.outputs.skip == 'false'
        run: |
          set -euxo pipefail
          cp yellowstone-build/target/release/libyellowstone_grpc_geyser.so libyellowstone_grpc_geyser.so
          ls -la libyellowstone_grpc_geyser.so

      - name: Upload to R2 (mirror to slv & slv-asia)
        if: steps.check_r2.outputs.skip == 'false'
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          BUCKET_NAMES: "slv slv-asia"
        run: |
          set -euo pipefail
          VERSION="${{ steps.get_version.outputs.version }}"

          api_put() {
            local bucket="$1"; local key="$2"; local file="$3"; local ctype="$4"
            code=$(curl -s -o /dev/null -w "%{http_code}" -X PUT \
              "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/r2/buckets/${bucket}/objects/${key}" \
              -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
              -H "Content-Type: ${ctype}" \
              --data-binary "@${file}")
            echo "PUT s3://${bucket}/${key} -> HTTP ${code}"
            [ "$code" = "200" ] || { echo "Upload failed: s3://${bucket}/${key}"; exit 1; }
          }

          for BUCKET_NAME in ${BUCKET_NAMES}; do
            echo "=== Uploading to bucket: ${BUCKET_NAME} ==="
            api_put "${BUCKET_NAME}" "yellowstone-grpc/${VERSION}/libyellowstone_grpc_geyser.so" "libyellowstone_grpc_geyser.so" "application/octet-stream"

            # latest.txt を両バケットに更新
            echo "${VERSION}" > latest.txt
            api_put "${BUCKET_NAME}" "yellowstone-grpc/latest.txt" "latest.txt" "text/plain"
          done

      - name: Send Discord notification
        if: steps.check_r2.outputs.skip == 'false'
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          set -euo pipefail
          VERSION="${{ steps.get_version.outputs.version }}"
          ARCH=$(uname -m)
          OS=$(uname -s)

          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{
              \"embeds\": [{
                \"title\": \"🌟 New/Updated Yellowstone gRPC\",
                \"description\": \"Uploaded library for ${VERSION}\",
                \"color\": 16753920,
                \"fields\": [
                  {
                    \"name\": \"Version\",
                    \"value\": \"${VERSION}\",
                    \"inline\": true
                  },
                  {
                    \"name\": \"Download URL - libyellowstone_grpc_geyser.so\",
                    \"value\": \"https://storage.slv.dev/yellowstone-grpc/${VERSION}/libyellowstone_grpc_geyser.so\",
                    \"inline\": false
                  }
                ],
                \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"
              }]
            }" \
            "${DISCORD_WEBHOOK_URL}"

      - name: Cleanup
        if: always()
        run: |
          rm -rf yellowstone-build libyellowstone_grpc_geyser.so latest.txt || true
