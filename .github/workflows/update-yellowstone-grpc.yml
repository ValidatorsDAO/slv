name: Update Yellowstone gRPC

on:
  schedule:
    - cron: "0 * * * *" # Run every hour
  workflow_dispatch: # Allow manual trigger
  push:
    branches: ["main"]
    paths:
      - ".github/workflows/update-yellowstone-grpc.yml"

jobs:
  check-and-build-yellowstone:
    name: Check and Build Yellowstone gRPC
    runs-on: [self-hosted]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libssl-dev \
            libudev-dev \
            libclang-dev \
            cmake \
            protobuf-compiler \
            git \
            curl \
            jq

      - name: Get latest Yellowstone gRPC release version
        id: get_version
        run: |
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/rpcpool/yellowstone-grpc/releases/latest | jq -r .tag_name)
          echo "Latest Yellowstone gRPC release: $LATEST_RELEASE"

          # Check if the release version is null or empty
          if [ "$LATEST_RELEASE" = "null" ] || [ -z "$LATEST_RELEASE" ]; then
            echo "Failed to fetch latest release version (got null or empty). Exiting safely."
            echo "version=none" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "version=$LATEST_RELEASE" >> $GITHUB_OUTPUT

      - name: Check if version exists in R2
        id: check_r2
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"

          # Skip if version is none (failed to fetch)
          if [ "$VERSION" = "none" ]; then
            echo "Skipping R2 check due to no valid version"
            echo "exists=skip" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if the version already exists by trying to access libyellowstone_grpc_geyser.so
          response=$(curl -s -o /dev/null -w "%{http_code}" "https://storage.slv.dev/yellowstone-grpc/${VERSION}/libyellowstone_grpc_geyser.so")

          if [ "$response" = "200" ]; then
            echo "Version $VERSION already exists in R2"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Version $VERSION not found in R2, will build"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Clone Yellowstone gRPC repository
        if: steps.check_r2.outputs.exists == 'false'
        run: |
          git clone https://github.com/rpcpool/yellowstone-grpc.git yellowstone-build
          cd yellowstone-build
          git checkout ${{ steps.get_version.outputs.version }}

      - name: Build Yellowstone gRPC
        if: steps.check_r2.outputs.exists == 'false'
        run: |
          cd yellowstone-build
          cargo build --release
        env:
          RUST_BACKTRACE: 1

      - name: Extract required library
        if: steps.check_r2.outputs.exists == 'false'
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"

          # Copy the Yellowstone gRPC shared library
          cp yellowstone-build/target/release/libyellowstone_grpc_geyser.so libyellowstone_grpc_geyser.so

          # Verify library exists
          ls -la libyellowstone_grpc_geyser.so

      - name: Upload to R2
        if: steps.check_r2.outputs.exists == 'false'
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          BUCKET_NAME="slv"

          # Upload libyellowstone_grpc_geyser.so library
          echo "Uploading libyellowstone_grpc_geyser.so library..."
          curl -X PUT \
            "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/r2/buckets/${BUCKET_NAME}/objects/yellowstone-grpc/${VERSION}/libyellowstone_grpc_geyser.so" \
            -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary "@libyellowstone_grpc_geyser.so"

          # Update latest.txt
          echo "$VERSION" > latest.txt
          curl -X PUT \
            "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/r2/buckets/${BUCKET_NAME}/objects/yellowstone-grpc/latest.txt" \
            -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
            -H "Content-Type: text/plain" \
            --data-binary "@latest.txt"

          echo "Successfully uploaded Yellowstone gRPC ${VERSION} binary to R2"

      - name: Send Discord notification
        if: steps.check_r2.outputs.exists == 'false'
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          ARCH=$(uname -m)
          OS=$(uname -s)

          # Send Discord notification
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{
              \"embeds\": [{
                \"title\": \"ðŸŒŸ New Yellowstone gRPC Build Available\",
                \"description\": \"Successfully built and uploaded Yellowstone gRPC ${VERSION}\",
                \"color\": 16753920,
                \"fields\": [
                  {
                    \"name\": \"Version\",
                    \"value\": \"${VERSION}\",
                    \"inline\": true
                  },
                  {
                    \"name\": \"Download URL - libyellowstone_grpc_geyser.so\",
                    \"value\": \"https://storage.slv.dev/yellowstone-grpc/${VERSION}/libyellowstone_grpc_geyser.so\",
                    \"inline\": false
                  }
                ],
                \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"
              }]
            }" \
            ${DISCORD_WEBHOOK_URL}

      - name: Cleanup
        if: always()
        run: |
          rm -rf yellowstone-build libyellowstone_grpc_geyser.so latest.txt
