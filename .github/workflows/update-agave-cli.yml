name: Update Agave CLI

on:
  schedule:
    - cron: "0 * * * *" # Run every hour
  workflow_dispatch: # Allow manual trigger
  push:
    branches: ["main"]
    paths:
      - ".github/workflows/update-agave-cli.yml"

jobs:
  check-and-build-agave:
    name: Check and Build Agave CLI
    runs-on: [self-hosted]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install build dependencies
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libssl-dev \
            libudev-dev \
            libclang-dev \
            cmake \
            protobuf-compiler \
            git \
            curl \
            jq

      - name: Get latest Agave release version
        id: get_version
        run: |
          set -euo pipefail
          LATEST_RELEASE=$(curl -fsSL https://api.github.com/repos/anza-xyz/agave/releases/latest | jq -r .tag_name || true)
          echo "Latest Agave release: ${LATEST_RELEASE}"
          if [ -z "${LATEST_RELEASE}" ] || [ "${LATEST_RELEASE}" = "null" ]; then
            echo "version=none" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "version=${LATEST_RELEASE}" >> $GITHUB_OUTPUT

      - name: Check which artifacts already exist in R2 (slv & slv-asia)
        id: check_r2
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          set -euo pipefail
          VERSION="${{ steps.get_version.outputs.version }}"
          if [ "${VERSION}" = "none" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          BUCKETS=("slv" "slv-asia")

          # Check existence via Cloudflare R2 API (auth) for both buckets.
          check_api() {
            local bucket="$1"; local key="$2"
            curl -s -o /dev/null -w "%{http_code}" -X GET \
              "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/r2/buckets/${bucket}/objects/${key}" \
              -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}"
          }

          KEY_AGAVE="agave/${VERSION}/agave-validator"
          KEY_SOLANA="agave/${VERSION}/solana"
          KEY_KEYGEN="agave/${VERSION}/solana-keygen"

          need_agave=false
          need_solana=false
          need_keygen=false

          for b in "${BUCKETS[@]}"; do
            code_a=$(check_api "$b" "${KEY_AGAVE}")
            code_s=$(check_api "$b" "${KEY_SOLANA}")
            code_k=$(check_api "$b" "${KEY_KEYGEN}")

            echo "Check $b -> ${KEY_AGAVE}: ${code_a}, ${KEY_SOLANA}: ${code_s}, ${KEY_KEYGEN}: ${code_k}"

            [ "$code_a" = "200" ] || need_agave=true
            [ "$code_s" = "200" ] || need_solana=true
            [ "$code_k" = "200" ] || need_keygen=true
          done

          echo "need_agave=${need_agave}"  >> $GITHUB_OUTPUT
          echo "need_solana=${need_solana}" >> $GITHUB_OUTPUT
          echo "need_keygen=${need_keygen}" >> $GITHUB_OUTPUT

          if [ "$need_agave" = "false" ] && [ "$need_solana" = "false" ] && [ "$need_keygen" = "false" ]; then
            echo "All artifacts already exist in both buckets. Skipping."
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Some artifacts are missing. Will proceed."
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Clone Agave repository
        if: steps.check_r2.outputs.skip == 'false'
        run: |
          set -euxo pipefail
          git clone https://github.com/anza-xyz/agave.git agave-build
          cd agave-build
          git checkout ${{ steps.get_version.outputs.version }}
          git submodule update --init --recursive

      - name: Build Agave (only if any artifact missing)
        if: steps.check_r2.outputs.skip == 'false'
        run: |
          set -euxo pipefail
          cd agave-build
          # Official helper (builds all cli binaries)
          ./scripts/cargo-install-all.sh .
        env:
          RUST_BACKTRACE: 1

      - name: Collect binaries (copy only those needed)
        if: steps.check_r2.outputs.skip == 'false'
        run: |
          set -euxo pipefail
          cd agave-build/target/release

          if [ "${{ steps.check_r2.outputs.need_solana }}" = "true" ]; then
            cp -v solana ../../..
          fi
          if [ "${{ steps.check_r2.outputs.need_keygen }}" = "true" ]; then
            cp -v solana-keygen ../../..
          fi
          if [ "${{ steps.check_r2.outputs.need_agave }}" = "true" ]; then
            cp -v agave-validator ../../..
          fi

          cd ../../..
          chmod +x solana solana-keygen agave-validator || true
          ls -la || true

      - name: Upload to R2 (mirror to slv & slv-asia; upload only those needed)
        if: steps.check_r2.outputs.skip == 'false'
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          BUCKET_NAMES: "slv slv-asia"
        run: |
          set -euo pipefail
          VERSION="${{ steps.get_version.outputs.version }}"

          api_put() {
            local bucket="$1"; local key="$2"; local file="$3"; local ctype="$4"
            code=$(curl -s -o /dev/null -w "%{http_code}" -X PUT \
              "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/r2/buckets/${bucket}/objects/${key}" \
              -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
              -H "Content-Type: ${ctype}" \
              --data-binary "@${file}")
            echo "PUT s3://${bucket}/${key} -> HTTP ${code}"
            [ "$code" = "200" ] || { echo "Upload failed: s3://${bucket}/${key}"; exit 1; }
          }

          for BUCKET_NAME in ${BUCKET_NAMES}; do
            echo "=== Uploading to bucket: ${BUCKET_NAME} ==="

            if [ "${{ steps.check_r2.outputs.need_solana }}" = "true" ] && [ -f "solana" ]; then
              api_put "${BUCKET_NAME}" "agave/${VERSION}/solana" "solana" "application/octet-stream"
            fi

            if [ "${{ steps.check_r2.outputs.need_keygen }}" = "true" ] && [ -f "solana-keygen" ]; then
              api_put "${BUCKET_NAME}" "agave/${VERSION}/solana-keygen" "solana-keygen" "application/octet-stream"
            fi

            if [ "${{ steps.check_r2.outputs.need_agave }}" = "true" ] && [ -f "agave-validator" ]; then
              api_put "${BUCKET_NAME}" "agave/${VERSION}/agave-validator" "agave-validator" "application/octet-stream"
            fi

            # latest.txt は両バケットに毎回更新（必要に応じて条件付け可）
            echo "${VERSION}" > latest.txt
            api_put "${BUCKET_NAME}" "agave/latest.txt" "latest.txt" "text/plain"
          done

      - name: Send Discord notification (only if something uploaded)
        if: steps.check_r2.outputs.skip == 'false'
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          set -euo pipefail
          VERSION="${{ steps.get_version.outputs.version }}"
          ARCH=$(uname -m)
          OS=$(uname -s)

          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{
              \"embeds\": [{
                \"title\": \"🚀 New/Updated Agave CLI Artifacts\",
                \"description\": \"Uploaded missing artifacts for ${VERSION}\",
                \"color\": 5814783,
                \"fields\": [
                  { \"name\": \"Version\", \"value\": \"${VERSION}\", \"inline\": true },
                  { \"name\": \"agave-validator\", \"value\": \"https://storage.slv.dev/agave/${VERSION}/agave-validator\", \"inline\": false },
                  { \"name\": \"solana\", \"value\": \"https://storage.slv.dev/agave/${VERSION}/solana\", \"inline\": false },
                  { \"name\": \"solana-keygen\", \"value\": \"https://storage.slv.dev/agave/${VERSION}/solana-keygen\", \"inline\": false }
                ],
                \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"
              }]
            }" \
            "${DISCORD_WEBHOOK_URL}"

      - name: Cleanup
        if: always()
        run: |
          rm -rf agave-build solana solana-keygen agave-validator latest.txt || true
