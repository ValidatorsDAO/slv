name: Update Jito CLI

on:
  schedule:
    - cron: "0 * * * *" # Run every hour
  workflow_dispatch: # Allow manual trigger
  push:
    branches: ["main"]
    paths:
      - ".github/workflows/update-jito-cli.yml"

jobs:
  check-and-build-jito:
    name: Check and Build Jito CLI
    runs-on: [self-hosted]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libssl-dev \
            libudev-dev \
            libclang-dev \
            cmake \
            protobuf-compiler \
            git \
            curl \
            jq

      - name: Get latest Jito release version
        id: get_version
        run: |
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/jito-foundation/jito-solana/releases/latest | jq -r .tag_name)
          echo "Latest Jito release: $LATEST_RELEASE"
          
          # Check if the release version is null or empty
          if [ "$LATEST_RELEASE" = "null" ] || [ -z "$LATEST_RELEASE" ]; then
            echo "Failed to fetch latest release version (got null or empty). Exiting safely."
            echo "version=none" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "version=$LATEST_RELEASE" >> $GITHUB_OUTPUT

      - name: Check if version exists in R2
        id: check_r2
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          
          # Skip if version is none (failed to fetch)
          if [ "$VERSION" = "none" ]; then
            echo "Skipping R2 check due to no valid version"
            echo "exists=skip" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if the version already exists by trying to access agave-validator binary
          response=$(curl -s -o /dev/null -w "%{http_code}" "https://storage.slv.dev/jito/${VERSION}/agave-validator")

          if [ "$response" = "200" ]; then
            echo "Version $VERSION already exists in R2"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Version $VERSION not found in R2, will build"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Clone Jito repository
        if: steps.check_r2.outputs.exists == 'false'
        run: |
          git clone --recursive https://github.com/jito-foundation/jito-solana.git jito-build
          cd jito-build
          git checkout ${{ steps.get_version.outputs.version }}
          git submodule update --init --recursive

      - name: Build Jito
        if: steps.check_r2.outputs.exists == 'false'
        run: |
          cd jito-build
          ./scripts/cargo-install-all.sh .
        env:
          RUST_BACKTRACE: 1

      - name: Extract required binaries
        if: steps.check_r2.outputs.exists == 'false'
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"

          # Copy only the required binaries
          cp jito-build/target/release/solana solana
          cp jito-build/target/release/solana-keygen solana-keygen
          cp jito-build/target/release/agave-validator agave-validator
          
          # Copy perf-libs directory if it exists
          echo "=== Checking for perf-libs directory ==="
          echo "Current working directory: $(pwd)"
          echo "Contents of jito-build/target/release:"
          ls -la jito-build/target/release/ 
          
          echo "Specifically looking for perf-libs:"
          if [ -d "jito-build/target/release/perf-libs" ]; then
            echo "✓ perf-libs directory found"
            echo "Source directory permissions:"
            ls -ld jito-build/target/release/perf-libs
            echo "Contents of source perf-libs:"
            ls -la jito-build/target/release/perf-libs/
            
            echo "Attempting to copy perf-libs..."
            set -x  # Enable debug output
            cp -rv jito-build/target/release/perf-libs ./perf-libs
            copy_exit_code=$?
            set +x  # Disable debug output
            
            echo "Copy command exit code: $copy_exit_code"
            
            if [ $copy_exit_code -eq 0 ]; then
              echo "✓ perf-libs directory copied successfully"
              echo "Destination directory check:"
              ls -ld perf-libs || echo "perf-libs directory not found"
              if [ -d "perf-libs" ]; then
                echo "✓ perf-libs directory exists in current location"
                echo "Contents of copied perf-libs directory:"
                ls -la perf-libs/
              else
                echo "✗ ERROR: perf-libs directory not found after copy"
                echo "Current directory contents:"
                ls -la
              fi
            else
              echo "✗ ERROR: Failed to copy perf-libs directory (exit code: $copy_exit_code)"
              echo "Current directory contents:"
              ls -la
            fi
          else
            echo "✗ ERROR: perf-libs directory not found in jito-build/target/release/"
            echo "Available directories and files:"
            find jito-build/target/release -maxdepth 2 -type d | head -10
            find jito-build/target/release -name "*perf*" -o -name "*lib*" | head -10
          fi

          # Make sure binaries are executable
          chmod +x solana solana-keygen agave-validator

          # Verify binaries exist
          ls -la solana solana-keygen agave-validator

      - name: Upload to R2
        if: steps.check_r2.outputs.exists == 'false'
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          BUCKET_NAME="slv"

          # Upload solana binary
          echo "Uploading solana binary..."
          curl -X PUT \
            "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/r2/buckets/${BUCKET_NAME}/objects/jito/${VERSION}/solana" \
            -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary "@solana"

          # Upload solana-keygen binary
          echo "Uploading solana-keygen binary..."
          curl -X PUT \
            "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/r2/buckets/${BUCKET_NAME}/objects/jito/${VERSION}/solana-keygen" \
            -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary "@solana-keygen"

          # Upload agave-validator binary
          echo "Uploading agave-validator binary..."
          curl -X PUT \
            "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/r2/buckets/${BUCKET_NAME}/objects/jito/${VERSION}/agave-validator" \
            -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary "@agave-validator"
          
          # Upload perf-libs if directory exists
          if [ -d "perf-libs" ]; then
            echo "Creating perf-libs tarball with all contents..."
            # Create tarball preserving directory structure
            tar -czf perf-libs.tar.gz -C . perf-libs
            
            echo "Uploading perf-libs.tar.gz..."
            curl -X PUT \
              "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/r2/buckets/${BUCKET_NAME}/objects/jito/${VERSION}/perf-libs.tar.gz" \
              -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
              -H "Content-Type: application/gzip" \
              --data-binary "@perf-libs.tar.gz"
            
            echo "perf-libs.tar.gz uploaded successfully"
            
            # List what was included in the archive
            echo "Archive contents:"
            tar -tzf perf-libs.tar.gz | head -20
          else
            echo "WARNING: perf-libs directory not found, skipping perf-libs upload"
          fi

          # Update latest.txt
          echo "$VERSION" > latest.txt
          curl -X PUT \
            "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/r2/buckets/${BUCKET_NAME}/objects/jito/latest.txt" \
            -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
            -H "Content-Type: text/plain" \
            --data-binary "@latest.txt"

          echo "Successfully uploaded Jito ${VERSION} binaries to R2"

      - name: Send Discord notification
        if: steps.check_r2.outputs.exists == 'false'
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          ARCH=$(uname -m)
          OS=$(uname -s)

          # Send Discord notification
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{
              \"embeds\": [{
                \"title\": \"⚡ New Jito CLI Build Available\",
                \"description\": \"Successfully built and uploaded Jito CLI ${VERSION}\",
                \"color\": 16776960,
                \"fields\": [
                  {
                    \"name\": \"Version\",
                    \"value\": \"${VERSION}\",
                    \"inline\": true
                  },
                  {
                    \"name\": \"Download URL - agave-validator\",
                    \"value\": \"https://storage.slv.dev/jito/${VERSION}/agave-validator\",
                    \"inline\": false
                  },
                  {
                    \"name\": \"Download URL - solana\",
                    \"value\": \"https://storage.slv.dev/jito/${VERSION}/solana\",
                    \"inline\": false
                  },
                  {
                    \"name\": \"Download URL - perf-libs.tar.gz\",
                    \"value\": \"https://storage.slv.dev/jito/${VERSION}/perf-libs.tar.gz\",
                    \"inline\": false
                  }
                ],
                \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"
              }]
            }" \
            ${DISCORD_WEBHOOK_URL}

      - name: Cleanup
        if: always()
        run: |
          rm -rf jito-build solana solana-keygen agave-validator perf-libs perf-libs.tar.gz latest.txt
