name: Update Jito CLI

on:
  schedule:
    - cron: "0 * * * *"
  workflow_dispatch:
  push:
    branches: ["main"]
    paths:
      - ".github/workflows/update-jito-cli.yml"

jobs:
  check-and-build-jito:
    name: Check and Build Jito CLI
    runs-on: [self-hosted]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install build dependencies
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libssl-dev \
            libudev-dev \
            libclang-dev \
            cmake \
            protobuf-compiler \
            git \
            curl \
            jq

      - name: Get latest Jito release version
        id: get_version
        run: |
          set -euo pipefail
          LATEST_RELEASE=$(curl -fsSL https://api.github.com/repos/jito-foundation/jito-solana/releases/latest | jq -r .tag_name || true)
          echo "Latest Jito release: ${LATEST_RELEASE}"
          if [ -z "${LATEST_RELEASE}" ] || [ "${LATEST_RELEASE}" = "null" ]; then
            echo "version=none" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "version=${LATEST_RELEASE}" >> $GITHUB_OUTPUT

      - name: Check which artifacts already exist in R2
        id: check_r2
        run: |
          set -euo pipefail
          VERSION="${{ steps.get_version.outputs.version }}"
          if [ "${VERSION}" = "none" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          base="https://storage.slv.dev/jito/${VERSION}"
          check() { curl -s -o /dev/null -w "%{http_code}" "$1"; }

          code_agave=$(check "${base}/agave-validator")
          code_solana=$(check "${base}/solana")
          code_keygen=$(check "${base}/solana-keygen")
          code_perf=$(check "${base}/perf-libs.tar.gz")

          need_agave=$([ "$code_agave" = "200" ] && echo "false" || echo "true")
          need_solana=$([ "$code_solana" = "200" ] && echo "false" || echo "true")
          need_keygen=$([ "$code_keygen" = "200" ] && echo "false" || echo "true")
          need_perf=$([ "$code_perf" = "200" ] && echo "false" || echo "true")

          echo "need_agave=${need_agave}" >> $GITHUB_OUTPUT
          echo "need_solana=${need_solana}" >> $GITHUB_OUTPUT
          echo "need_keygen=${need_keygen}" >> $GITHUB_OUTPUT
          echo "need_perf=${need_perf}"   >> $GITHUB_OUTPUT

          # 何か一つでも足りなければスキップしない
          if [ "$need_agave" = "false" ] && [ "$need_solana" = "false" ] && [ "$need_keygen" = "false" ] && [ "$need_perf" = "false" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Clone Jito repository
        if: steps.check_r2.outputs.skip == 'false'
        run: |
          set -euxo pipefail
          git clone --recursive https://github.com/jito-foundation/jito-solana.git jito-build
          cd jito-build
          git checkout ${{ steps.get_version.outputs.version }}
          git submodule update --init --recursive

      - name: Build Jito (only if binaries are missing)
        if: steps.check_r2.outputs.skip == 'false' && (steps.check_r2.outputs.need_agave == 'true' || steps.check_r2.outputs.need_solana == 'true' || steps.check_r2.outputs.need_keygen == 'true' || steps.check_r2.outputs.need_perf == 'true')
        run: |
          set -euxo pipefail
          cd jito-build
          # 公式の一括インストールスクリプト（必要なperf生成もここで揃う想定）
          ./scripts/cargo-install-all.sh .
        env:
          RUST_BACKTRACE: 1

      - name: Collect binaries (copy only those missing)
        if: steps.check_r2.outputs.skip == 'false'
        run: |
          set -euxo pipefail
          cd jito-build/target/release

          if [ "${{ steps.check_r2.outputs.need_solana }}" = "true" ]; then
            cp -v solana ../../..
          fi
          if [ "${{ steps.check_r2.outputs.need_keygen }}" = "true" ]; then
            cp -v solana-keygen ../../..
          fi
          if [ "${{ steps.check_r2.outputs.need_agave }}" = "true" ]; then
            cp -v agave-validator ../../..
          fi

          # perf-libs は優先して solana-perf.tgz をアップする
          if [ "${{ steps.check_r2.outputs.need_perf }}" = "true" ]; then
            real_perf_dir=$(readlink -f perf-libs || true)   # -> ../perf-libs の実体
            echo "perf-libs symlink real path: ${real_perf_dir}"

            # パス候補: 実体側 or symlink側 どちらにも対応
            if [ -f "${real_perf_dir}/solana-perf.tgz" ]; then
              cp -v "${real_perf_dir}/solana-perf.tgz" ../../../perf-libs.tar.gz
              echo "Using existing solana-perf.tgz as perf-libs.tar.gz"
            elif [ -f "perf-libs/solana-perf.tgz" ]; then
              cp -v "perf-libs/solana-perf.tgz" ../../../perf-libs.tar.gz
              echo "Using symlinked perf-libs/solana-perf.tgz as perf-libs.tar.gz"
            else
              echo "solana-perf.tgz not found. Falling back to tar directory..."
              # ディレクトリをアーカイブ（シンボリックリンクは実体へ）
              tar -C "${real_perf_dir:-perf-libs}" -czf ../../../perf-libs.tar.gz .
              echo "Created perf-libs.tar.gz from directory"
            fi
          fi

          cd ../../..
          # 権限
          chmod +x solana solana-keygen agave-validator || true
          ls -la || true

      - name: Upload to R2 (only missing ones, to slv & slv-asia)
        if: steps.check_r2.outputs.skip == 'false'
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          BUCKET_NAMES: "slv slv-asia"
        run: |
          set -euo pipefail
          VERSION="${{ steps.get_version.outputs.version }}"

          api_put() {
            local bucket="$1"; local key="$2"; local file="$3"; local ctype="$4"
            code=$(curl -s -o /dev/null -w "%{http_code}" -X PUT \
              "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/r2/buckets/${bucket}/objects/${key}" \
              -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
              -H "Content-Type: ${ctype}" \
              --data-binary "@${file}")
            echo "PUT s3://${bucket}/${key} -> HTTP ${code}"
            [ "$code" = "200" ] || { echo "Upload failed: s3://${bucket}/${key}"; exit 1; }
          }

          for BUCKET_NAME in ${BUCKET_NAMES}; do
            echo "=== Uploading to bucket: ${BUCKET_NAME} ==="

            if [ "${{ steps.check_r2.outputs.need_solana }}" = "true" ] && [ -f "solana" ]; then
              api_put "${BUCKET_NAME}" "jito/${VERSION}/solana" "solana" "application/octet-stream"
            fi

            if [ "${{ steps.check_r2.outputs.need_keygen }}" = "true" ] && [ -f "solana-keygen" ]; then
              api_put "${BUCKET_NAME}" "jito/${VERSION}/solana-keygen" "solana-keygen" "application/octet-stream"
            fi

            if [ "${{ steps.check_r2.outputs.need_agave }}" = "true" ] && [ -f "agave-validator" ]; then
              api_put "${BUCKET_NAME}" "jito/${VERSION}/agave-validator" "agave-validator" "application/octet-stream"
            fi

            if [ "${{ steps.check_r2.outputs.need_perf }}" = "true" ] && [ -f "perf-libs.tar.gz" ]; then
              api_put "${BUCKET_NAME}" "jito/${VERSION}/perf-libs.tar.gz" "perf-libs.tar.gz" "application/gzip"
            fi

            # latest.txt は両バケットに更新
            echo "${VERSION}" > latest.txt
            api_put "${BUCKET_NAME}" "jito/latest.txt" "latest.txt" "text/plain"
          done

      - name: Send Discord notification (only if something new uploaded)
        if: steps.check_r2.outputs.skip == 'false'
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          set -euo pipefail
          VERSION="${{ steps.get_version.outputs.version }}"
          ARCH=$(uname -m)
          OS=$(uname -s)
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{
              \"embeds\": [{
                \"title\": \"⚡ New/Updated Jito CLI Artifacts\",
                \"description\": \"Uploaded missing artifacts for ${VERSION}\",
                \"color\": 16776960,
                \"fields\": [
                  { \"name\": \"Version\", \"value\": \"${VERSION}\", \"inline\": true },
                  { \"name\": \"agave-validator\", \"value\": \"https://storage.slv.dev/jito/${VERSION}/agave-validator\", \"inline\": false },
                  { \"name\": \"solana\", \"value\": \"https://storage.slv.dev/jito/${VERSION}/solana\", \"inline\": false },
                  { \"name\": \"solana-keygen\", \"value\": \"https://storage.slv.dev/jito/${VERSION}/solana-keygen\", \"inline\": false },
                  { \"name\": \"perf-libs.tar.gz\", \"value\": \"https://storage.slv.dev/jito/${VERSION}/perf-libs.tar.gz\", \"inline\": false }
                ],
                \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"
              }]
            }" \
            "${DISCORD_WEBHOOK_URL}"

      - name: Cleanup
        if: always()
        run: |
          rm -rf jito-build solana solana-keygen agave-validator perf-libs perf-libs.tar.gz latest.txt || true
