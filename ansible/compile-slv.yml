---
# Ansible playbook to compile SLV on a remote build server
# This playbook clones the repository, compiles the code, and uploads the artifacts

- name: Compile SLV
  hosts: localhost
  become: true
  vars:
    version: '{{ version }}'
    github_token: '{{ github_token }}'
    # Cloudflare API credentials
    cloudflare_account_id: '{{ cloudflare_account_id }}'
    cloudflare_api_token: '{{ cloudflare_api_token }}'
    cloudflare_purge_email: '{{ cloudflare_purge_email }}'
    cloudflare_purge_api_token: '{{ cloudflare_purge_api_token }}'
    cloudflare_email: '{{ cloudflare_email }}'
    cloudflare_api_key: '{{ cloudflare_api_key }}'
    cloudflare_zone_id: '{{ cloudflare_zone_id }}'
    build_dir: /opt/slv-build
    artifacts_dir: /opt/slv-artifacts
    deno_env:
      HOME: "/root"
      DENO_INSTALL: "/root/.deno"
      PATH: "/root/.deno/bin:/usr/bin:/bin"
  tasks:
    - name: Install required packages
      apt:
        name:
          - build-essential
          - curl
          - unzip
          - git
          - python3
          - python3-pip
        state: present

    - name: Create artifacts directory
      file:
        path: '{{ artifacts_dir }}'
        state: directory
        mode: '0755'
        owner: root
        group: root

    - name: Clean build directory
      file:
        path: '{{ build_dir }}'
        state: absent

    - name: Create build directory
      file:
        path: '{{ build_dir }}'
        state: directory
        mode: '0755'
        owner: root
        group: root

    - name: Remove existing Deno installation
      file:
        path: /root/.deno
        state: absent

    - name: Install specific version of Deno (v2.5.4)
      shell: curl -fsSL https://deno.land/install.sh | sh -s v2.5.4
      args:
        creates: /root/.deno/bin/deno
      become_user: root

    - name: Set Deno PATH globally
      copy:
        dest: /etc/profile.d/deno.sh
        content: |
          export DENO_INSTALL="/root/.deno"
          export PATH="$DENO_INSTALL/bin:$PATH"
        owner: root
        group: root
        mode: '0755'

    - name: Clone repository
      git:
        repo: https://github.com/ValidatorsDAO/slv.git
        dest: '{{ build_dir }}'
        version: 'v{{ version }}'
      environment:
        GIT_TERMINAL_PROMPT: 0
        GH_TOKEN: '{{ github_token }}'

    - name: Update version in constants
      replace:
        path: '{{ build_dir }}/cmn/constants/version.ts'
        regexp: "export const VERSION = '[^']*'"
        replace: "export const VERSION = '{{ version }}'"

    - name: Confirm Deno version used
      shell: deno --version
      environment:
        PATH: "/root/.deno/bin:/usr/bin:/bin"
      register: deno_version

    - name: Show Deno version
      debug:
        msg: '{{ deno_version.stdout_lines }}'


    - name: Run version update script
      shell: deno run -A scripts/update-version.ts
      args:
        chdir: '{{ build_dir }}'
      environment:
        DENO_INSTALL: "/root/.deno"
        PATH: "/root/.deno/bin:/usr/bin:/bin"

    - name: Create dist directory
      file:
        path: '{{ build_dir }}/dist'
        state: directory
        mode: '0755'

    - name: Build for Linux
      shell: deno install --allow-scripts=npm:protobufjs@7.4.0 && deno i && deno task build:linux
      args:
        chdir: '{{ build_dir }}'
      environment: "{{ deno_env }}"

    - name: Build for Mac
      shell: deno task build:mac
      args:
        chdir: '{{ build_dir }}'
      environment: "{{ deno_env }}"

    - name: Copy Linux artifacts
      copy:
        src: '{{ build_dir }}/dist/slv-x86_64-unknown-linux-gnu-exe.tar.gz'
        dest: '{{ artifacts_dir }}/slv-x86_64-unknown-linux-gnu-exe.tar.gz'
        remote_src: yes

    - name: Copy Mac artifacts
      copy:
        src: '{{ build_dir }}/dist/slv-x86_64-apple-darwin-exe.tar.gz'
        dest: '{{ artifacts_dir }}/slv-x86_64-apple-darwin-exe.tar.gz'
        remote_src: yes

    - name: Upload Linux executable
      shell: |
        export DENO_INSTALL="/root/.deno"
        export PATH="$DENO_INSTALL/bin:$PATH"
        export CLOUDFLARE_ACCOUNT_ID="{{ cloudflare_account_id }}"
        export CLOUDFLARE_API_TOKEN="{{ cloudflare_api_token }}"
        export CLOUDFLARE_API_KEY="{{ cloudflare_api_key }}"
        export CLOUDFLARE_EMAIL="{{ cloudflare_email }}"
        cd {{ build_dir }} && deno run -A cli/uploadExe.ts
      args:
        executable: /bin/bash

    - name: Create template archive
      shell: |
        cd {{ build_dir }} && tar -czf dist/template.tar.gz ./template/{{ version }}
      args:
        executable: /bin/bash

    - name: Upload template
      shell: |
        export DENO_INSTALL="/root/.deno"
        export PATH="$DENO_INSTALL/bin:$PATH"
        export CLOUDFLARE_ACCOUNT_ID="{{ cloudflare_account_id }}"
        export CLOUDFLARE_API_TOKEN="{{ cloudflare_api_token }}"
        export CLOUDFLARE_API_KEY="{{ cloudflare_api_key }}"
        export CLOUDFLARE_EMAIL="{{ cloudflare_email }}"
        cd {{ build_dir }} && deno run -A cli/uploadTemplate.ts
      args:
        executable: /bin/bash

    - name: Upload install script
      shell: |
        export DENO_INSTALL="/root/.deno"
        export PATH="$DENO_INSTALL/bin:$PATH"
        export CLOUDFLARE_ACCOUNT_ID="{{ cloudflare_account_id }}"
        export CLOUDFLARE_API_TOKEN="{{ cloudflare_api_token }}"
        export CLOUDFLARE_API_KEY="{{ cloudflare_api_key }}"
        export CLOUDFLARE_EMAIL="{{ cloudflare_email }}"
        cd {{ build_dir }} && deno run -A cli/uploadScript.ts
      args:
        executable: /bin/bash

    - name: Purge cache
      shell: |
        export DENO_INSTALL="/root/.deno"
        export PATH="$DENO_INSTALL/bin:$PATH"
        export CLOUDFLARE_PURGE_EMAIL="{{ cloudflare_purge_email }}"
        export CLOUDFLARE_PURGE_API_TOKEN="{{ cloudflare_purge_api_token }}"
        export CLOUDFLARE_ZONE_ID="{{ cloudflare_zone_id }}"
        export CLOUDFLARE_ACCOUNT_ID="{{ cloudflare_account_id }}"
        cd {{ build_dir }} && deno run -A cmn/lib/purgeR2Cache.ts
      args:
        executable: /bin/bash

    - name: Copy Linux artifacts to dist directory
      copy:
        src: '{{ build_dir }}/dist/slv-x86_64-unknown-linux-gnu-exe.tar.gz'
        dest: '{{ artifacts_dir }}/slv-x86_64-unknown-linux-gnu-exe.tar.gz'
        remote_src: yes

    - name: Debug artifact paths
      debug:
        msg:
          - 'Build directory: {{ build_dir }}'
          - 'Artifacts directory: {{ artifacts_dir }}'
          - 'Checking for file: {{ build_dir }}/dist/slv-x86_64-unknown-linux-gnu-exe.tar.gz'

    - name: List files in build dist directory
      shell: ls -la {{ build_dir }}/dist/
      register: build_dist_files

    - name: Show build dist files
      debug:
        msg: '{{ build_dist_files.stdout_lines }}'

    - name: Copy Linux artifacts back to local dist directory
      fetch:
        src: '{{ build_dir }}/dist/slv-x86_64-unknown-linux-gnu-exe.tar.gz'
        dest: ./dist/
        flat: yes

    - name: Copy Mac artifacts back to local dist directory
      fetch:
        src: '{{ build_dir }}/dist/slv-x86_64-apple-darwin-exe.tar.gz'
        dest: ./dist/
        flat: yes
