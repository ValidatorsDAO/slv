---
- name: Mount and configure disks with NVMe prioritization, using UUIDs
  hosts: all
  become: true
  vars:
    mount_dirs:
      - /mnt
      - /mnt/ledger
      - /mnt/accounts
      - /mnt/snapshot
  tasks:
    - name: Ensure swap is disabled
      block:
        - name: Check for active swap
          shell: swapon --show --noheadings --output NAME | awk '{print $1}'
          register: active_swap
          changed_when: false

        - name: Debug active swap devices
          debug:
            var: active_swap.stdout_lines

        - name: Disable active swap devices
          command: swapoff {{ item }}
          loop: "{{ active_swap.stdout_lines }}"
          when: active_swap.stdout_lines | length > 0

        - name: Remove swap entries from /etc/fstab
          replace:
            path: /etc/fstab
            regexp: ".*swap.*"
            replace: ""
          when: active_swap.stdout_lines | length > 0

    - name: Ensure /mnt and subdirectories exist with correct ownership
      file:
        path: "{{ item }}"
        state: directory
        owner: solv
        group: solv
        mode: "0755"
      loop: "{{ mount_dirs }}"

    - name: Execute shell script to find unmounted disks
      shell: |
        lsblk -nr -o NAME,TYPE,SIZE,MOUNTPOINT | awk '
        $2 == "disk" &&
        ($4 == "" || $4 ~ /^[[:space:]]*$/) &&
        system("lsblk -nr -o TYPE /dev/" $1 " | grep -q part") != 0 {
          size = $3
          suffix = substr(size, length(size), 1)
          base = substr(size, 1, length(size)-1) + 0
          if (suffix == "T") base *= 1000
          if (base >= 400) {
            nvme = ($1 ~ /^nvme/) ? 1 : 0
            print nvme, base, $1
          }
        }' | sort -k1,1nr -k2,2nr | awk '{print $3}'
      register: unmounted_disks_output
      args:
        chdir: /home/solv

    - name: Debug unmounted disks
      debug:
        var: unmounted_disks_output.stdout_lines

    - name: Remove the find_unmounted_disks.sh script
      file:
        path: /home/solv/find_unmounted_disks.sh
        state: absent

    - name: Skip if no unmounted disks found
      debug:
        msg: "No unmounted disks found, skipping disk formatting and mounting tasks."
      when: unmounted_disks_output.stdout_lines | length == 0

    - name: Mount and format disks dynamically
      block:
        - name: Format disk to ext4 if not already formatted
          filesystem:
            fstype: ext4
            dev: "/dev/{{ item }}"
          loop: "{{ unmounted_disks_output.stdout_lines }}"
          loop_control:
            label: "{{ item }}"

        - name: Get disk size and UUID
          shell: |
            size=$(lsblk -b -nr -o SIZE /dev/{{ item }} | awk '{print int($1 / 1000000000)}')
            uuid=$(blkid -s UUID -o value /dev/{{ item }})
            echo "{{ item }} $size $uuid"
          register: disk_info_raw
          loop: "{{ unmounted_disks_output.stdout_lines }}"
          changed_when: false

        - name: Parse disk info into structured list
          set_fact:
            eligible_disks: >-
              {{
                disk_info_raw.results
                | map(attribute='stdout')
                | map('regex_search', '^(\\S+) (\\d+) (\\S+)$')
                | map('list')
                | map('combine', [{'name': 0, 'size_gb': 1 | int, 'uuid': 2}])
                | list
              }}

        - name: Assign disks to mount points based on size
          set_fact:
            mount_map: >-
              {{
                dict([
                  ['/mnt/ledger', eligible_disks | selectattr('size_gb', '>=', 800) | list | first],
                  ['/mnt/accounts', eligible_disks | selectattr('size_gb', '>=', 800) | list | nth(1)],
                  ['/mnt/snapshot', eligible_disks
                                     | rejectattr('uuid', 'equalto', (mount_map["/mnt/ledger"].uuid if mount_map["/mnt/ledger"] is defined else "")) 
                                     | rejectattr('uuid', 'equalto', (mount_map["/mnt/accounts"].uuid if mount_map["/mnt/accounts"] is defined else "")) 
                                     | selectattr('size_gb', '>=', 400) | list | first]
                ] | select('defined') | map('items') | list | flatten(1))
              }}

        - name: Mount selected disks using UUIDs
          mount:
            path: "{{ item.key }}"
            src: "UUID={{ item.value.uuid }}"
            fstype: ext4
            state: mounted
            opts: defaults,noatime
          loop: "{{ mount_map | dict2items }}"

        - name: Add UUID-based entries to /etc/fstab
          lineinfile:
            path: /etc/fstab
            line: "UUID={{ item.value.uuid }} {{ item.key }} ext4 defaults,noatime 0 0"
            regexp: "^UUID={{ item.value.uuid }}\\s+{{ item.key }}\\s+"
            state: present
          loop: "{{ mount_map | dict2items }}"
          
