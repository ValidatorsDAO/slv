---
- name: Install/Update Solana CLI (agave or jito) from hosted binaries
  hosts: all
  become: true
  vars:
    # ==== Args: -e "solana_cli_type=agave version=v3.0.7" ====
    solana_cli_type: "agave"   # agave or jito
    version: "v3.0.7"

    # ==== URLs ====
    # e.g.:
    #  agave -> https://storage.slv.dev/agave/v3.0.7/...
    #  jito  -> https://storage.slv.dev/jito/v3.0.7-jito/...
    download_base: "https://storage.slv.dev/{{ solana_cli_type }}/{{ version }}"

    install_root: "/opt/{{ solana_cli_type }}"
    release_dir: "{{ install_root }}/releases/{{ version }}"
    bin_release_dir: "{{ release_dir }}/bin"
    current_link: "{{ install_root }}/current"
    solana_release_dir: "/home/solv/.local/share/solana/install/active_release"
    solana_bin_dir: "{{ solana_release_dir }}/bin"

    binaries:
      - agave-validator
      - solana
      - solana-keygen

    ignore_missing_binaries: true

  tasks:
    - name: Validate solana_cli_type
      assert:
        that:
          - solana_cli_type in ['agave', 'jito']
        fail_msg: "solana_cli_type must be 'agave' or 'jito'. Got: {{ solana_cli_type }}"

    - name: Validate version looks like vX.Y.Z (warning only)
      debug:
        msg: "Using version={{ version }} (make sure it matches your storage layout, e.g. v3.0.7)"

    - name: Ensure directories exist
      file:
        path: "{{ item }}"
        state: directory
        owner: solv
        group: solv
        mode: "0755"
      loop:
        - "{{ install_root }}"
        - "{{ install_root }}/releases"
        - "{{ release_dir }}"
        - "{{ bin_release_dir }}"
        - "{{ solana_bin_dir }}"

    - name: Detect current linked release (if any)
      stat:
        path: "{{ current_link }}"
        follow: false
      register: current_link_stat

    - name: Read link target of current
      command: readlink -f "{{ current_link }}"
      register: current_target
      changed_when: false
      failed_when: false
      when: current_link_stat.stat.islnk is defined and current_link_stat.stat.islnk

    - name: Decide if update is required
      set_fact:
        update_required: "{{ (current_target.stdout | default('')) != release_dir }}"

    - name: Download binaries into versioned bin dir
      get_url:
        url: "{{ download_base }}/{{ item }}"
        dest: "{{ bin_release_dir }}/{{ item }}"
        mode: "0755"
        force: yes
        # checksum: "sha256:{{ lookup('url', download_base ~ '/' ~ item ~ '.sha256') | default('') }}"  # 配布あれば活用
      loop: "{{ binaries }}"
      register: dl_results
      failed_when: >
        (not ignore_missing_binaries) and
        (dl_results is failed)
      ignore_errors: "{{ ignore_missing_binaries }}"

    - name: Build list of successfully downloaded binaries
      set_fact:
        downloaded_bins: >-
          {{
            (dl_results.results | default([]))
            | selectattr('failed','!=',True)
            | map(attribute='item')
            | list
          }}

    - name: Ensure we have at least one binary
      assert:
        that:
          - downloaded_bins | length > 0
        fail_msg: "No binaries were downloaded. Check URLs, version, or binary names."

    - name: Point 'current' symlink to this release (atomic flip)
      file:
        src: "{{ release_dir }}"
        dest: "{{ current_link }}"
        state: link
        force: yes

    - name: Link binaries into active_release/bin
      file:
        src: "{{ bin_release_dir }}/{{ item }}"
        dest: "{{ solana_bin_dir }}/{{ item }}"
        state: link
        force: yes
      loop: "{{ downloaded_bins }}"

    - name: Ensure PATH line exists in /home/solv/.profile
      become: no
      lineinfile:
        path: "/home/solv/.profile"
        line: "export PATH={{ solana_bin_dir }}:$PATH"
        state: present
        create: yes

    - name: Verify versions
      become: no
      shell: |
        set -e
        if [ -x "{{ solana_bin_dir }}/solana" ]; then "{{ solana_bin_dir }}/solana" --version || true; fi
        if [ -x "{{ solana_bin_dir }}/agave-validator" ]; then "{{ solana_bin_dir }}/agave-validator" --version || true; fi
      args:
        executable: /bin/bash
      register: version_check
      changed_when: false
      failed_when: false

    - name: Show version outputs
      debug:
        var: version_check.stdout
